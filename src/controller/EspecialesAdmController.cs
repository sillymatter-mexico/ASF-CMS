using System;
using System.Collections.Generic;
using System.Web;
using asf.cms.bll;
using asf.cms.model;
using asf.cms.dal;
using asf.cms.util;
using System.Text.RegularExpressions;
using asf.cms.widgets;
using System.Text;

namespace asf.cms.controller
{
    public class EspecialesAdmController:Controller
    {
        public EspecialesAdmController(HttpContext context)
            : base(context)
        {
            isAdmin = 1;
        }
        public void New()
        {

            EspecialesVO pvo = new EspecialesVO();
        
            if (Request["sectionId"] != null)
                pvo.SectionId = int.Parse(Request["sectionId"]);
            else
            {
                Section s = Section.GetMainSection();
                if (s == null)
                    SendMessage("Necesita crear primero una seccion principal");
                else
                    pvo.SectionId = s.SectionId;
            }
            
            this.Items.Add("publication", pvo);            
            this.ShowPage("especiales/PopUp.aspx");
        }

        public void Insert()
        {
            Especiales p = new Especiales();
            p.publication.LanguageId = Language.GetCurrentLanguageId();
            p.publication.Created = DateTime.Today;
            p.publication.Updated = DateTime.Today;
            p.publication.Published = DateTime.Now;
            p.publication.Unpublished = DateTime.Now.AddYears(20);
            p.publication.IsMain = false;
            if (Request["sectionId"] !="")
               p.publication.SectionId = int.Parse(Request["sectionId"]);
            p.publication.Title = Request["title"].Trim();
            p.publication.Permalink = Request["permalink"];
            p.publication.Position = 0;
            p.publication.Content = "";
            p.publication.Status = 2;
            p.publication.Active = true;
            p.publication.NewsTTL = 30;
            p.publication.Visitas = 0;
            p.publication.Meta = p.buildJsonAutomaticMeta();
            p.publication.AutogeneratedType = "especiales";
            Especiales.SetLastUpdateDate(DateTime.Today);
            p.FilesPath = uploadUrl;
            if(p.Save())
            {
                p.CreateDirectory();
                this.Items.Add("publication", p.publication);
                SendMessage("{\"error\":0,\"msj\":\" Los datos han sido guardados\",\"id\":" + p.publication.Id + "}");
                ModificationLog.AddPublicationRegistry(ModificationType.CREATE, p.publication, GetCurrentUser());
            }
            else
            {
                SendMessage("{\"error\":1,\"msj\":\"Error al guardar los datos.\"}");
            }
        }

        public void List()
        {
            this.Items.Add("userType", GetCurrentUserType());
            this.Items.Add("selectedTab", "Especiales");
            this.ShowPage("especiales/List.aspx");
        }

        public void GetAllPublications()
        {
            GridInput gi=new GridInput();
            gi.Rows = new List<RowGrid>();
            if (Request["page"] != null)
            {
                gi.Page = int.Parse(Request["page"]);
                gi.Sidx = Request["sidx"];
                gi.Sord = Request["sord"];
                gi.Limit = int.Parse(Request["rows"]);
            }  

            UserVO uvo = (UserVO)Context.Session["user"];
            string username = "";
            if (uvo != null)
                username = uvo.Username;
            List<EspecialesAdminVO> lista = Especiales.ListPublicationAdmin(username,"");
            gi.Records = lista.Count;
            gi.calculaInternos();
            
            // Parche para ordenar por seccion
            if (gi.Sidx == "Section")
            {
                lista.Sort(EspecialesAdminVO.CompareBySection);
                if(gi.Sord == "desc")
                {
                    lista.Reverse();
                }
            } else
            {
                lista = Especiales.ListPublicationAdmin(username, gi.Orden); //NOTA: Quitar esto. Hace doble consulta.
            }

            // Termina parche
            foreach (EspecialesAdminVO pvo in lista)
            {

                if (pvo.AutogeneratedType != null)
                {
                    string imgIsMain = pvo.IsMain ? "<img src='../view/img/main.png' alt='Principal' title='Principal'/>" : "";
                    string imgStatus = "<img src='../view/img/status" + pvo.Status + ".png' alt='" + pvo.Status + "' title='" + pvo.Status + "'/>";
                    string cmd = "<a href='javascript:void(0)' onclick='deletePublication(" + pvo.Id + ");'><img src='../view/img/delete.png' alt='Borrar' title='Eliminar'/></a>";
                    string cmd2_img = pvo.SitemapExclude ? "status4.png" : "status1.png", cmd2_txt = pvo.SitemapExclude ? "Incluir en el mapa" : "Excluir del mapa";
                    string cmd2 = "<a href='jacascript:void(0)' onclick='switchMapEnable(" + pvo.Id + ");'><img src='../view/img/" + cmd2_img + "' alt='" + cmd2_txt + "' title='" + cmd2_txt + "' /></a>";

                    RowGrid row = new RowGrid();
                    row.Id = pvo.Id.ToString();
                    row.Cell = new List<string>();
                    row.Cell.Add(imgIsMain);
                    row.Cell.Add(imgStatus);
                    row.Cell.Add(pvo.Title);
                    row.Cell.Add(pvo.Section);
                    row.Cell.Add(pvo.LanguageId == 1 ? "es-MX" : "en-US");
                    row.Cell.Add(cmd2);
                    row.Cell.Add(cmd);
                    gi.Rows.Add(row);
                }
            }
            gi.calculaInternos();

            string json = gi.toJSON();
            ShowPage("js/default.js");
            Response.Write(json);
        }
        public void UpdateMeta()
        {
            String meta=Request["meta"];
            int id = int.Parse(Request["id"]);
            Especiales p = new Especiales();
            p.publication=Especiales.GetById(id);
            p.metaList = MetaItem.ListFromJson(meta);
            p.metaList.ForEach(delegate(MetaItem mi) {
                mi.Preview = mi.getPreview();
            });
            p.publication.Meta = MetaItem.ListToJson(p.metaList) ;
            p.UpdateMeta();
            SendMessage("Se han guardado los cambios");
        }
        public void Edit()
        {
            UserVO uvo=GetCurrentUser();
            Especiales p = new Especiales();
            if (Request["id"] == null && Request["permalink"] != null)
            {
                string perma = Request["permalink"];
                p.publication = Especiales.GetByPermalink(perma);
            }
            else
            {
                int id = int.Parse(Request["id"]);
                p.publication = Especiales.GetById(id);
            }
            SectionTree st = new SectionTree();
            SectionTreeNode stn = new SectionTreeNode();
            if (uvo.Type == "ADMIN")
               stn= st.getTree(p.publication.SectionId);
            else
                stn=st.getTree(Section.GetSectionsByLogin(uvo.Username),p.publication.SectionId);
            bool newsinclude = false;
            if (p.publication.SectionId != 0)
                newsinclude = Section.GetById(p.publication.SectionId).NewsInclude;
            if (String.IsNullOrEmpty(p.publication.Meta))
                p.publication.Meta = p.buildJsonAutomaticMeta();
            
            this.Items.Add("sectionTreeOptions", stn.ToOptions(1));
            this.Items.Add("selectedTab", "Especiales");
            this.Items.Add("sectionNewsInclude", newsinclude+"");
            this.Items.Add("publication", p.publication);
            this.Items.Add("action", "Update");

            this.ShowPage("especiales/New.aspx");
        }

        public void Update()
        {
            UserVO uvo = (UserVO)Context.Session["user"];
            int id,section, lang;
            DateTime published, unpublished;

            if (!int.TryParse(Request["Id"], out id) || !int.TryParse(Request["sectionId"], out section) || !int.TryParse(Request["languageId"],out lang))
            {
                SendMessage("{\"error\":1,\"msj\":\"No se pudo actualizar la informacion\",\"id\":0}");
                return;
            }
            if (!DateTime.TryParse(Request["published"], out published))
            {
                SendMessage("{\"error\":1,\"msj\":\"La Fecha de publicacion es invalida\",\"id\":0}");
                return;
            } 
            if (!DateTime.TryParse(Request["unpublished"], out unpublished))
            {
                SendMessage("{\"error\":1,\"msj\":\"La Fecha para retirar la publicacion es invalida\",\"id\":0}");
                return;
            }
            if(unpublished.CompareTo(published)<1)
            {
                SendMessage("{\"error\":1,\"msj\":\"La Fecha para retirar la publicacion debe ser mayor a la fecha de publicacion\",\"id\":0}");
                return;
            }
            string x = Request["meta"];
            bool hasDescription= false;
            Especiales p = new Especiales();
            p.publication.Id = id;
            p.publication = Especiales.GetById(p.publication.Id);
            EspecialesVO previous = p.Clone();


            p.metaList = MetaItem.ListFromJson(p.publication.Meta);
            p.metaList.ForEach(delegate(MetaItem mi)
            {
                if (mi.Type == "description")
                    hasDescription = true;
            });
            p.publication.SectionId = section;
            p.publication.LanguageId = lang;
            p.publication.Created = DateTime.Parse(Request["created"]);
            p.publication.Updated = DateTime.Now;
            p.publication.Published = published;
            p.publication.Unpublished = unpublished;
            p.publication.IsMain = Request["isMain"] != null;
            p.publication.Title = Request["title"];
            p.publication.Content = Request["elm1"].Replace("\\n", "<br/>");
            p.publication.Permalink = Request["permalink"];
            p.publication.Status = p.GetStatus();
            p.publication.NewsTTL=30;
            p.publication.Active = true;
            p.publication.Position = int.Parse(Request["Position"]);
            p.publication.Visitas = int.Parse(Request["visitas"]);
            if (!hasDescription&&!String.IsNullOrEmpty(p.publication.Content))
            {
                MetaItem mi = p.buildDescription();
                p.metaList.Add(mi);
                p.publication.Meta = MetaItem.ListToJson(p.metaList);
            }
            
            Especiales.SetLastUpdateDate (DateTime.Today);

            //Check the content!

            //If the publication contains a widget expression, then set the flag as true and save it
            WidgetParseResult wpr = WidgetParser.ContainsWidgetExpression(p.publication.Content, uvo.Username);
            if (!wpr.ContainsWidgetExpression&&wpr.ErrorsInExpression!=null)
            {
                StringBuilder sb = new StringBuilder();
                foreach(string error in wpr.ErrorsInExpression)
                {
                    sb.Append(string.Format("- {0}\\n", error));
                }
                SendMessage("{\"error\":1,\"msj\":\"" + sb.ToString() + "\",\"id\":" + p.publication.Id + "}");
            }
            else 
            {
                p.publication.HasWidgets = wpr.ContainsWidgetExpression;
                
                if(p.Save())
                {
                    SendMessage("{\"msj\":\"Los datos han sido guardados\",\"id\":" + p.publication.Id + "}");
                    ModificationLog.AddPublicationRegistry(ModificationType.MODIFY, p.publication, uvo, previous);
                }
                else
                {
                    SendMessage("{\"error\":1,\"msj\":\"Los datos NO han sido guardados\",\"id\":" + p.publication.Id + "}");
                }
            }
        }
      
        public void EditNew()
        {
            int id = int.Parse(Request["id"]);
            EspecialesVO vo = Especiales.GetById(id);
            if (vo != null)
            {
                this.Items.Add("selectedTab", "Especiales");
                this.Items.Add("sectionNewsInclude", Section.GetById(vo.SectionId).NewsInclude + "");
                this.Items.Add("publication", vo);
                this.Items.Add("action", "UpdateNews");
            }
            else
            {
                this.Items.Add("selectedTab", "Especiales");
                this.Items.Add("sectionNewsInclude", true + "");
                this.Items.Add("publication", new EspecialesVO());
                this.Items.Add("action", "UpdateNews");
            }

            this.ShowPage("especiales/NewsEdition.aspx");
        }
        public void UpdateNews()
        {
            Especiales p = new Especiales();

            p.publication.Id = int.Parse(Request["publicationId"]);
            p.publication.SectionId = int.Parse(Request["sectionId"]);

            string newsContent = Request["newsContent"];

            if (!string.IsNullOrEmpty(newsContent))
            {
                p.publication.NewsContent = newsContent;
            }

            string newsttl = Request["txtNewsTTL"];
            if (!string.IsNullOrEmpty(newsttl))
            {
                p.publication.NewsTTL = int.Parse(newsttl);
            }

            string newsSectionInclude = Request["cbNewsSectionInclude"];
            p.publication.NewsIncludeInSection = !string.IsNullOrEmpty(newsSectionInclude);

            string newsPublicationInclude = Request["cbNewsPublicationInclude"];
            p.publication.NewsInclude = !string.IsNullOrEmpty(newsPublicationInclude);

            string cbNewsPin = Request["cbNewsPin"];
            p.publication.NewsPin = !string.IsNullOrEmpty(cbNewsPin);

            if(p.SaveNews())
            {
                SendMessage("{\"error\":0 \"msj\":\"Los datos han sido guardados\",\"id\":" + p.publication.Id + "}");
                //ModificationLog.AddPublicationRegistry(ModificationType.MODIFY, p.publication, GetCurrentUser(), prevPub);
            }
            else
            {
                SendMessage("{\"error\":1,\"msj\":\"Los datos NO han sido guardados\",\"id\":" + p.publication.Id + "}");
            }
        }
        public void Delete()
        {
            int publicationId = int.Parse(Request["publicationId"]);
            try
            {
                Especiales.Delete(publicationId);
                SendMessage("Se ha eliminado el registro");
            }
            catch (Exception ex)
            {
                SendMessage("Ocurrio un error al eliminar el registro");

            }
        }
        public void SwitchMapExclude()
        {
            UserVO uvo = (UserVO)Context.Session["user"];
            if (uvo.Type == "ADMIN")
            {
                int publicationId = int.Parse(Request["publicationId"]);
                EspecialesDAL pdal = new EspecialesDAL();
                EspecialesVO pvo = Especiales.GetById(publicationId);
                pvo.SitemapExclude = !pvo.SitemapExclude;
                try
                {
                    pdal.Update(pvo);
                    SendMessage("Cambio Exitoso.");

                }
                catch (Exception ex)
                {
                    SendMessage("Hubo un problema al cambiar el estado del visibilidad en el mapa de navegación.");
                }
            } else
            {
                SendMessage("Usuario no autorizado.");
            }
        }
    }
}
