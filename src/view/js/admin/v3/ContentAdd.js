var addPanel;

$(document).ready(function () {
    addPanel = $("#modalNewContent");
    let titleInput = addPanel.find("#titleNewContent"), permalinkInput = addPanel.find("#permalinkNewContent");
    titleInput.blur(function () {
        permalinkInput.val($.trim(titleInput.val()).replace(/ /g, '_'));
    });
});

function AddContentDialog(type, labels, action, parentId, autoType, callback) {
    // Parameter validation
    if (type !== "section" && type !== "publication" && type !== "special")
        throw new Error("No se puede iniciar el diálogo sin un tipo válido.")
    if (labels === null || labels === undefined)
        throw new Error("No se puede iniciar el diálogo sin las etiquetas.");

    if (typeof action === "function") {
        callback = action;
        action = undefined;
        parentId = 0;
    }

    if (typeof action === "number") {
        action = undefined;
        parentId = action;
    }

    if (typeof parentId === "function") {
        callback = parentId;
        parentId = 0;
    }

    if (typeof autoType === "function") {
        callback = autoType;
        autoType = null;
    }

    action = action || "ask";
    action = action.toLowerCase();

    parentId = parentId || 0;

    callback = callback || function nop() { };

    let result = 0, msg = "";

    // Etiquetas

    addPanel.find(".header").text(labels.title);
    addPanel.find("#titleNewContentMsg").text(labels.titleErrorMessage);

    // Limpiar estado

    addPanel.find("#permalinkNewContent, #titleNewContent").val("");
    addPanel.find("#titleNewContent").parent().removeClass("error");
    addPanel.find("#titleNewContentMsg").hide();

    // Accion

    addPanel.modal({
        keyboardShortcuts: false,
        closable: false,
        onApprove: function () {
            console.log("Iniciando nueva sección.");

            addPanel.find(".button.approve").addClass("loading");
            addPanel.find(".button.deny").addClass("disabled").prop("disable", true);

            let title = addPanel.find("#titleNewContent").val(),
                permalink = addPanel.find("#permalinkNewContent").val();

            if (title == '') {
                addPanel.find("#titleNewContent").parent().addClass("error");
                addPanel.find("#titleNewContentMsg").show();
                addPanel.find(".button.approve").removeClass("loading");
                addPanel.find(".button.deny").removeClass("disabled").prop("disable", false);
                return false;
            }

            let creationData = { title: title, permalink: permalink, parentSectionId: isNaN(parentId) ? 0 : parentId, autogenerated_type: autoType };
            let creationCallback = function creationCallback(err, data) {
                if (err) {
                    result = 0;
                    msg = err.msg;
                    AddResultMessage(msg, "err");
                    callback({ id: result, msg: msg });
                } else {
                    result = data.id;
                    callback(null, { id: result, msg: msg });
                }
                addPanel.modal("hide");
                addPanel.find(".button.approve").removeClass("loading");
                addPanel.find(".button.deny").removeClass("disabled").prop("disable", false);
            };
            let action;
            switch (type) {
                case "section":
                    action = addSection;
                    break;
                case "publication":
                    action = addPublication;
                    break;
                case "special":
                    action = addSpecialPublication;
                    break;
            }
            action(creationData, creationCallback);
            return false;
        },
        onDeny: function () {
            result = 0;
            msg = labels.result.canceled.message;
            console.log(msg);
            callback({ msg: msg });
        },
        onHidden: function () {
            if (result != 0) {
                switch (action) {
                    case "ask":
                        AddResultMessage(labels.result.created.message, "ok");
                        SimpleDialog("ok", labels.result.created.dialog.title, labels.result.created.dialog.text, function (approve, ele) {
                            if (approve)
                                navigate(type, result);
                        });
                        break;
                    case "navigate":
                        navigate(type, result);
                        break;
                    case "nothing":
                    default:
                        AddResultMessage(labels.result.created, "ok");
                }
            }
        }
    }).modal("show");
}

function addSection(data, callback) {
    $.ajax({
        type: "POST",
        url: "../SectionAdm/Insert",
        data: $.param(data),
        dataType: "json",
        success: function (d) {
            if (d.error)
                callback(d);
            else
                callback(null, d);
        },
        error: function (e) {
            callback({ error: true, msg: e.message || "Error desconocido.", details: e });
        }
    });
}

function addPublication(data, callback) {
    $.ajax({
        type: "POST",
        url: "../PublicationAdm/Insert",
        data: $.param(data),
        dataType: "json",
        success: function (d) {
            if (d.error)
                callback(d);
            else
                callback(null, d);
        },
        error: function (e) {
            callback({ error: true, msg: e.message || "Error desconocido.", details: e });
        }
    });
}

function addSpecialPublication(data, callback) {
    $.ajax({
        type: "POST",
        url: "../SectionSpecialAdm/Insert",
        data: $.param(data),
        dataType: "json",
        success: function (d) {
            if (d.error)
                callback(d);
            else
                callback(null, d);
        },
        error: function (e) {
            callback({ error: true, msg: e.message || "Error deconocido", details: e });
        }
    });
}

function navigate(type, id) {
    let url;
    switch (type) {
        case "section":
            url = "../SectionAdm/Edit?sectionId=";
            break;
        case "publication":
        case "special":
            url = "../PublicationAdm/Edit?id=";
            break;
    }
    url += id;
    window.location = url;
}