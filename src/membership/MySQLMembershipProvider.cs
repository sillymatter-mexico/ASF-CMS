using System;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Security.Cryptography;
using System.Configuration.Provider;
using asf.cms.model;
using asf.cms.dal;
using System.Text;
namespace asf.cms.membership
{
    public class MySQLMembershipProvider:MembershipProvider
    {
         
        private const string encryptionKey = "TR198FDS03#$%8QDVS&AQ";

        /// <summary>
        /// Initializes a new instance of the <see cref="IntosaiMembershipProvider"/> class.
        /// </summary>
        public MySQLMembershipProvider()
        {
        }

        public override void Initialize(string name, System.Collections.Specialized.NameValueCollection config)
        {
            base.Initialize(name, config);
        }


        /// <summary>
        /// Validate the user's name and password against the database
        /// Note that locked users are not validated!!
        /// </summary>
        /// <param name="username">The name of the user to validate.</param>
        /// <param name="password">The password for the specified user.</param>
        /// <returns>true if validated</returns>
        public override bool ValidateUser(string username, string password)
        {
            try
            {
                UserDAL udal= new UserDAL();
                UserVO u=udal.GetByLoginPassword("paco","pepe");
                if(u!=null)
                return true;//autenticado, guardar usuario en sesion, loguear resultaod
                else ;//no autenticado actualizar numero de fallos, guardar log

            }
            catch (Exception e)
            {
                //loguear
            }
            return false;
        }

        public override bool UnlockUser(string userName)
        {
            /// TODO: Unlock user logic
            return true;
        }


        /// <summary>
        /// change the password for a user
        /// </summary>
        /// <param name="username">The user to update the password for.</param>
        /// <param name="oldPassword">The current password for the specified user.</param>
        /// <param name="newPassword">The new password for the specified user.</param>
        /// <returns>
        /// true if the password was updated successfully; otherwise, false.
        /// </returns>
        public override bool ChangePassword(string username, string oldPassword, string newPassword)
        {
            if (!ValidateUser(username, oldPassword))
                return false;


            ValidatePasswordEventArgs args =
              new ValidatePasswordEventArgs(username, newPassword, true);

            OnValidatingPassword(args);

            UserDAL udal = new UserDAL();
            UserVO u = udal.GetByLoginPassword(username, oldPassword);
            u.Password = newPassword;
            udal.Update(u);
            return true;
        }

        /// <summary>
        /// Reset the user password to a new autogenerated password
        /// </summary>
        /// <param name="username">The user to reset the password for.</param>
        /// <param name="answer">The password answer for the specified user.</param>
        /// <returns>The new password for the specified user.</returns>
        public override string ResetPassword(string username, string answer)
        {
            /// TODO: Implement ResetPassword logic
            return Convert.ToBase64String(EncryptPassword(System.Text.Encoding.Unicode.GetBytes("newPassword")));
        }

        /// <summary>
        /// Validates the user hash.
        /// </summary>
        /// <param name="userName">Name of the user.</param>
        /// <param name="hash">The hash.</param>
        /// <returns></returns>
        public bool ValidateUserHash(string userName, string hash)
        {
            ///TODO: Implement user hash validation
            return true;
        }

        /// <summary>
        /// Get a user given the username
        /// </summary>
        /// <param name="userName">The name of the user to get information for.</param>
        /// <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
        /// <returns>
        /// A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
        /// </returns>
        public override MembershipUser GetUser(string userName, bool userIsOnline)
        {
            UserDAL udal = new UserDAL();
            UserVO u = udal.GetById(userName);
            string passwordQuestion = "";
            string comment = "";
            
            bool lockedOut = false;

            MembershipUser muser = new MembershipUser("MySQLProvider", u.Username, null, u.Username,
                passwordQuestion, comment, true, lockedOut, DateTime.Now,
                DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);

            return muser;
        }

        public override int GetNumberOfUsersOnline()
        {
            /// TODO: Implement number of users online logic
            return 0;
        }

        public string generateMD5(string seed)
        {
            return Convert.ToBase64String(EncryptPassword(System.Text.Encoding.Unicode.GetBytes(seed)));
        }

        public string decodeMD5(string coded)
        {
            return System.Text.Encoding.Unicode.GetString(DecryptPassword(Convert.FromBase64String(coded)));
        }

        /// <summary>
        /// Encodes the password.
        /// Encrypts, Hashes, or leaves the password clear based on the PasswordFormat.
        /// </summary>
        /// <param name="password">The password.</param>
        /// <returns></returns>
        public string EncodePassword(string password)
        {

            string encodedPassword = password;

            switch (PasswordFormat)
            {
                case MembershipPasswordFormat.Clear:
                    break;
                case MembershipPasswordFormat.Encrypted:
                    encodedPassword =
                      Convert.ToBase64String(EncryptPassword(Encoding.Unicode.GetBytes(password)));
                    break;
                case MembershipPasswordFormat.Hashed:
                    HMACSHA1 hash = new HMACSHA1();
                    hash.Key = HexToByte(encryptionKey);
                    encodedPassword =
                      Convert.ToBase64String(hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
                    break;
                default:
                    throw new Exception("Unsupported password format.");
            }

            return encodedPassword;
        }

        /// <summary>
        /// Encodes (Encrypts) the given password without having to initialize the provider.
        /// </summary>
        /// <param name="password">The password.</param>
        /// <returns></returns>
        public string LogoutEncodePassword(string password)
        {
            string encodedPassword = password;

            encodedPassword = Convert.ToBase64String(EncryptPassword(Encoding.Unicode.GetBytes(password)));
            return encodedPassword;
        }

        /// <summary>
        /// Logouts the decode password.
        /// </summary>
        /// <param name="password">The password.</param>
        /// <returns></returns>
        public string LogoutDecodePassword(string password)
        {
            return Encoding.Unicode.GetString(DecryptPassword(Convert.FromBase64String(password)));
        }

        /// <summary>
        /// Uns the encode password.
        /// Decrypts or leaves the password clear based on the PasswordFormat.
        /// </summary>
        /// <param name="encodedPassword">The encoded password.</param>
        /// <returns></returns>
        public string UnEncodePassword(string encodedPassword)
        {
            string password = encodedPassword;

            switch (PasswordFormat)
            {
                case MembershipPasswordFormat.Clear:
                    break;
                case MembershipPasswordFormat.Encrypted:
                    password =
                      Encoding.Unicode.GetString(DecryptPassword(Convert.FromBase64String(password)));
                    break;
                case MembershipPasswordFormat.Hashed:
                    throw new Exception("Cannot unencode a hashed password.");
                default:
                    throw new Exception("Unsupported password format.");
            }

            return password;
        }

        /// <summary>
        /// Converts a hexadecimal string to a byte array. Used to convert encryption key values from the configuration.
        /// </summary>
        /// <param name="hexString">The hex string.</param>
        /// <returns></returns>
        private byte[] HexToByte(string hexString)
        {
            byte[] returnBytes = new byte[hexString.Length / 2];
            for (int i = 0; i < returnBytes.Length; i++)
                returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
            return returnBytes;
        }

        /// <summary>
        /// Generates a random password using the framework.
        /// </summary>
        /// <returns></returns>
        public string GenerateRandomPassword()
        {
            string newPassword = Membership.GeneratePassword(m_minRequiredPasswordLength, m_minRequiredNonAlphanumericCharacters);
            return newPassword;
        }

        /// <summary>
        /// Checks the password.
        /// </summary>
        /// <param name="a">A.</param>
        /// <param name="b">The b.</param>
        /// <returns></returns>
        protected bool CheckPassword(string a, string b)
        {
            return true;
        }

        #region Not Implemented

        public override MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override string GetPassword(string username, string answer)
        {
            throw new Exception("The method or operation is not implemented.");
        }



        public override void UpdateUser(MembershipUser user)
        {
            throw new Exception("The method or operation is not implemented.");
        }


        public override MembershipUser GetUser(object providerUserKey, bool userIsOnline)
        {
            throw new Exception("The method or operation is not implemented.");
        }


        public override string GetUserNameByEmail(string email)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override bool DeleteUser(string username, bool deleteAllRelatedData)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }


        public override MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion
        #region Parameters
        private string m_applicationName;
        private bool m_enablePasswordReset;
        private bool m_enablePasswordRetrieval;
        private bool m_requiresQuestionAndAnswer;
        private bool m_requiresUniqueEmail;
        private int m_maxInvalidPasswordAttempts;
        private int m_passwordAttemptWindow;
        private MembershipPasswordFormat m_passwordFormat;
        private string m_connectionString;
        private int m_minRequiredPasswordLength;
        private int m_minRequiredNonAlphanumericCharacters;
        private string m_passwordStrengthRegularExpression;
        private int m_autoUnlockTimeout;
        public override bool EnablePasswordRetrieval
        {
            get { return m_enablePasswordRetrieval; }
        }

        public override bool EnablePasswordReset
        {
            get { return m_enablePasswordReset; }
        }

        public override bool RequiresQuestionAndAnswer
        {
            get { return m_requiresQuestionAndAnswer; }
        }

        public override string ApplicationName
        {
            get { return m_applicationName; }
            set { m_applicationName = value; }
        }

        public override int MaxInvalidPasswordAttempts
        {
            get { return m_maxInvalidPasswordAttempts; }
        }

        public override int PasswordAttemptWindow
        {
            get { return m_passwordAttemptWindow; }
        }

        public override bool RequiresUniqueEmail
        {
            get { return m_requiresUniqueEmail; }
        }

        public override MembershipPasswordFormat PasswordFormat
        {
            get { return m_passwordFormat; }
        }

        public override int MinRequiredPasswordLength
        {
            get { return m_minRequiredPasswordLength; }
        }

        public override int MinRequiredNonAlphanumericCharacters
        {
            get { return m_minRequiredNonAlphanumericCharacters; }
        }

        public override string PasswordStrengthRegularExpression
        {
            get { return m_passwordStrengthRegularExpression; }
        }

        #endregion
       
    }
}
